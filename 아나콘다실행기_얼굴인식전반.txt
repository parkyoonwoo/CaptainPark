아나콘다 관리자 권한 실행

http://thrillfighter.tistory.com/466 //아나콘다 설치 및 파이썬 버전 바꾸기
https://github.com/davisking/dlib/issues/218 // 아나콘다에서 dlib 설치하기


<항상 먼저 쳐두기>
activate py35
activate tensorflow_env


conda install -c menpo dlib 
conda install opencv 
conda install scikit-image
conda install tensorflow
conda install -c conda-forge dlib

*openface 설치
https://github.com/cmusatyalab/openface   // 여기서 파일들 다 다운받기
아나콘다프롬프트 -> activate tensorflow_env -> 파일경로로 이동 -> python setup.py install
-> jupyter notebook 


/////////////////////////// 얼굴 검출 코드
import sys
import dlib
from skimage import io

# Take the image file name from the command line
file_name = "C:/Users/user/Desktop/abb.jpg"

# Create a HOG face detector using the built-in dlib class
face_detector = dlib.get_frontal_face_detector()

win = dlib.image_window()

# Load the image into an array
image = io.imread(file_name)

# Run the HOG face detector on the image data.
# The result will be the bounding boxes of the faces in our image.
detected_faces = face_detector(image, 1)

print("I found {} faces in the file {}".format(len(detected_faces), file_name))

# Open a window on the desktop showing the image
win.set_image(image)

# Loop through each face we found in the image
for i, face_rect in enumerate(detected_faces):

   # Detected faces are returned as an object with the coordinates 
   # of the top, left, right and bottom edges
   print("- Face #{} found at Left: {} Top: {} Right: {} Bottom: {}".format(i, face_rect.left(), face_rect.top(), face_rect.right(), face_rect.bottom()))

   # Draw a box around each face we found
   win.add_overlay(face_rect)
           
# Wait until the user hits <enter> to close the window           
dlib.hit_enter_to_continue()



///////////////////////// 얼굴 랜드마크 찾기

import sys
import dlib
from skimage import io

# You can download the required pre-trained face detection model here:
# http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2
predictor_model = "C:/Users/user/Desktop/shape_predictor_68_face_landmarks/shape_predictor_68_face_landmarks.dat"

# Take the image file name from the command line
file_name = "C:/Users/user/Desktop/abb.jpg"

# Create a HOG face detector using the built-in dlib class
face_detector = dlib.get_frontal_face_detector()
face_pose_predictor = dlib.shape_predictor(predictor_model)

win = dlib.image_window()

# Take the image file name from the command line
file_name = "C:/Users/user/Desktop/abb.jpg"

# Load the image
image = io.imread(file_name)

# Run the HOG face detector on the image data
detected_faces = face_detector(image, 1)

print("Found {} faces in the image file {}".format(len(detected_faces), file_name))

# Show the desktop window with the image
win.set_image(image)

# Loop through each face we found in the image
for i, face_rect in enumerate(detected_faces):

	# Detected faces are returned as an object with the coordinates 
	# of the top, left, right and bottom edges
	print("- Face #{} found at Left: {} Top: {} Right: {} Bottom: {}".format(i, face_rect.left(), face_rect.top(), face_rect.right(), face_rect.bottom()))

	# Draw a box around each face we found
	win.add_overlay(face_rect)

	# Get the the face's pose
	pose_landmarks = face_pose_predictor(image, face_rect)

	# Draw the face landmarks on the screen.
	win.add_overlay(pose_landmarks)
	        
dlib.hit_enter_to_continue()

////////////////////////이미지위치보정 

import sys
import dlib
import cv2
import openface

# You can download the required pre-trained face detection model here:
# http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2
predictor_model = "C:/Users/user/Desktop/shape_predictor_68_face_landmarks/shape_predictor_68_face_landmarks.dat"

# Take the image file name from the command line
file_name = "C:/Users/user/Desktop/abb.jpg"

# Create a HOG face detector using the built-in dlib class
face_detector = dlib.get_frontal_face_detector()
face_pose_predictor = dlib.shape_predictor(predictor_model)
face_aligner = openface.AlignDlib(predictor_model)

# Take the image file name from the command line
file_name = "C:/Users/user/Desktop/abb.jpg"

# Load the image
image = cv2.imread(file_name)

# Run the HOG face detector on the image data
detected_faces = face_detector(image, 1)

print("Found {} faces in the image file {}".format(len(detected_faces), file_name))

# Loop through each face we found in the image
for i, face_rect in enumerate(detected_faces):

	# Detected faces are returned as an object with the coordinates 
	# of the top, left, right and bottom edges
	print("- Face #{} found at Left: {} Top: {} Right: {} Bottom: {}".format(i, face_rect.left(), face_rect.top(), face_rect.right(), face_rect.bottom()))

	# Get the the face's pose
	pose_landmarks = face_pose_predictor(image, face_rect)

	# Use openface to calculate and perform the face alignment
	alignedFace = face_aligner.align(534, image, face_rect, landmarkIndices=openface.AlignDlib.OUTER_EYES_AND_NOSE)

	# Save the aligned image to a file
	cv2.imwrite("aligned_face_{}.jpg".format(i), alignedFace)